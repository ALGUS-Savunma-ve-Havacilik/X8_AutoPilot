#!/usr/bin/env python
#A node that emulated the topics as if they are generated by the vehicle. 
# Topics are the vehicle pose, battery voltage, the throttle stick RC input 
# and lastly the Autopilot and mission go boolean indicators. 

import roslib; roslib.load_manifest('rospy_tutorials')
import random
import math
import rospy
import sys

from std_msgs.msg import Float64, Bool, Int16
from geometry_msgs.msg import Pose, Point, Quaternion, PoseStamped

def X8_Emulator():
    #Create Publishers
    pub_poseStamped = rospy.Publisher('poseStamped', PoseStamped)
    pub_batt        = rospy.Publisher('battery', Float64)
    pub_AUTOPILOT   = rospy.Publisher('AUTOPILOT', Bool)
    pub_MissionGo   = rospy.Publisher('MISSIONGO', Bool)
    pub_throttle    = rospy.Publisher('ctrl_throttle', Int16)
    #State a ROS NODE
    rospy.init_node('X8_HardwareEmulator', anonymous=True)
    r = rospy.Rate(10) # 10hz    
    start_time = rospy.Time.now().to_sec()
    AutoPilotSwitch =       True
    MissionGoSwitch =       True
    freq            = 0.002 #Frequancy of sinosoidal wave for throttle stick
    poseStamped     = PoseStamped() #Construct a Stamped Pose Object
    while not rospy.is_shutdown():
        #Generate Signals
        t                           = rospy.Time.now().to_sec()-start_time
##        poseStamped.pose            = Pose(Point(random.uniform(0,1), math.sin(2*math.pi*freq*t), math.fabs(2*math.sin(2*math.pi*freq*t))), Quaternion(0.000, 0.000, 0.000, 1.00))
        poseStamped.pose            = Pose(Point(math.cos(2*math.pi*freq*t), math.sin(2*math.pi*freq*t), math.fabs(1.5+2*math.sin(2*math.pi*freq*t))), Quaternion(0.000, 0.000, 0.000, 1.00))
        poseStamped.header.frame_id = "/Body" #Frame of ref that the trajectory is formualted in
        poseStamped.header.stamp    = rospy.Time.now()
        
        batt             = 20-0.01*t
        ctrl_throttle    = 510*math.sin(2*math.pi*freq*t)+200
        
        #Log Signals        
        rospy.loginfo("Battery Voltage: %s"  , batt)
        rospy.loginfo("Autopilot Switch: %s" , AutoPilotSwitch)
        rospy.loginfo("MissionGo Switch: %s" , MissionGoSwitch)
        rospy.loginfo("Throttle Command : %s", ctrl_throttle)
        rospy.loginfo("Vehicle Pose: %s"     , poseStamped.pose)
        print("---------------------------------------------")
        #Publish Signals
        pub_poseStamped.publish(poseStamped)
        pub_batt.publish(batt)
        pub_AUTOPILOT.publish(AutoPilotSwitch)
        pub_MissionGo.publish(MissionGoSwitch)
        pub_throttle.publish(ctrl_throttle)
        #Sleep (monitor the publishing rate)
        r.sleep()
    
if __name__ == '__main__':
    try:
        X8_Emulator()
    except rospy.ROSInterruptException: pass
